# ZiRar Project .gitignore
# Comprehensive ignore file for Python desktop application with PyInstaller builds

# ===== Python =====
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec.bak
version_info.txt

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ===== PyInstaller Build Artifacts =====
# Build directories
build/
dist/
release/

# PyInstaller spec backup files
*.spec.bak

# Version info files (generated during build)
version_info.txt

# ===== ZiRar Specific =====
# Test archives (may contain sensitive test data)
test_*.zip
test_*.rar
*.test.zip
*.test.rar

# Password lists (may contain sensitive data)
passwords_*.txt
wordlist_*.txt
dictionary_*.txt
# Keep sample_passwords.txt as it's for educational purposes
!sample_passwords.txt

# User data and logs
*.log
logs/
user_data/
temp/
tmp/

# Configuration files with potentially sensitive data
config.ini
settings.json
user_config.*

# ===== IDE and Editor Files =====
# Visual Studio Code
.vscode/
*.code-workspace

# PyCharm
.idea/
*.iml
*.iws
*.ipr

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ===== Operating System Files =====
# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ===== Archive and Compressed Files =====
# Exclude test archives and compressed files that might contain sensitive data
*.7z
*.dmg
*.gz
*.iso
*.jar
*.tar
*.zip
*.rar
# Keep specific files that are part of the project
!zirar.zip
!zirar.rar
!sample_*.zip
!sample_*.rar
!test_archives/sample_*

# ===== Temporary and Cache Files =====
# Python cache
*.pyc
*.pyo
*.pyd
.Python
pip-log.txt
pip-delete-this-directory.txt
.tox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis
.pytest_cache

# General temporary files
*.tmp
*.temp
*.bak
*.backup
*.old
*.orig
*.save
*~

# ===== Security and Sensitive Data =====
# API keys and secrets
.env
.env.local
.env.*.local
secrets.json
api_keys.txt
credentials.*

# Private keys
*.pem
*.key
*.p12
*.pfx

# Database files
*.db
*.sqlite
*.sqlite3

# ===== Documentation Build =====
# Sphinx
docs/_build/
docs/build/

# MkDocs
site/

# ===== Package Manager Files =====
# npm (if using any Node.js tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# ===== Custom Ignore Patterns =====
# User-specific files that shouldn't be tracked
user_*
local_*
private_*
personal_*

# Development and testing files
dev_*
debug_*
scratch_*
playground_*

# Large files that shouldn't be in git
*.large
*.huge
files_over_100mb/

# ===== Keep Important Files =====
# Explicitly keep important project files even if they match patterns above
!README.md
!LICENSE
!USAGE.md
!requirements.txt
!build_requirements.txt
!sample_passwords.txt
!zirar.png
!zirar.ico
!main.py
!setup_unrar.py
!create_test_archives.py
!build.py
!build.bat
!build.sh
!ZiRar.spec
!CONTRIBUTING.md
!SECURITY.md
!RELEASE_GUIDE.md
!RELEASE_NOTES.md
!ICON_INTEGRATION_GUIDE.md
